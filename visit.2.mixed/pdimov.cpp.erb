// MPark.Variant
//
// Copyright Michael Park, 2015-2017
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

#include <boost/variant2/variant.hpp>

template <int>
struct S {};

struct V {
  template <typename T, typename U>
  void operator()(T, U) const {}
};

int main() {
<%=
  (0...env[:repeat]).map { |i|
    x_alts = (0...n).map { |alt| "S<#{alt + i}>" }.join(", ")
    y_alts = (n - 1).downto(0).map { |alt| "S<#{alt + i}>" }.join(", ")
    "  boost::variant2::variant<#{x_alts}>\n" \
    "      xv#{i}(S<#{i}>{}),\n"              \
    "      xw#{i}(S<#{(n - 1) + i}>{});\n"    \
    "  boost::variant2::variant<#{y_alts}>\n" \
    "      yv#{i}(S<#{i}>{}),\n"              \
    "      yw#{i}(S<#{(n - 1) + i}>{});"
  }.join("\n")
%>
#if defined(METABENCH)
<%=
  (0...env[:repeat]).map { |i|
    "  boost::variant2::visit(V{}, xv#{i}, yv#{i});\n" \
    "  boost::variant2::visit(V{}, xv#{i}, yw#{i});\n" \
    "  boost::variant2::visit(V{}, xw#{i}, yv#{i});\n" \
    "  boost::variant2::visit(V{}, xw#{i}, yw#{i});"
  }.join("\n")
%>
#endif
}
