// MPark.Variant
//
// Copyright Michael Park, 2015-2017
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#include <mapbox/variant.hpp>

template <int>
struct S {};

struct V {
  template <typename T, typename U>
  void operator()(T, U) const {}
};

int main() {
<%=
  (0...env[:repeat]).map { |i|
    alts = (0...n).map { |alt| "S<#{alt + i}>" }.join(", ")
    "  mapbox::util::variant<#{alts}>\n" \
    "      v#{i}(S<#{i}>{}),\n"          \
    "      w#{i}(S<#{(n - 1) + i}>{});"
  }.join("\n")
%>
#if defined(METABENCH)
<%=
  (0...env[:repeat]).map { |i|
    "  mapbox::util::apply_visitor(V{}, v#{i}, v#{i});\n" \
    "  mapbox::util::apply_visitor(V{}, v#{i}, w#{i});\n" \
    "  mapbox::util::apply_visitor(V{}, w#{i}, v#{i});\n" \
    "  mapbox::util::apply_visitor(V{}, w#{i}, w#{i});"
  }.join("\n")
%>
#endif
}
