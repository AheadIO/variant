# MPark.Variant
#
# Copyright Michael Park, 2015-2017
#
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

language: cpp
sudo: false

branches:
  only:
    - master

git:
  depth: 1

env:
  global:
    - secure: jL8hAVoa2B512uGeoh5DL2YXrAznfKPz3GbcaUPzR6mR2Izj2yHFihLLeHrEY8vUdadS8zbn2CwtWnmJjNz5kIT/RxESxJJtgVNruwo0u4piIfxVI/tTRObMXKaGrfquDAHS/hjAhQlPSNNr+89oFSBvSfNpAVECd/ERhhnjIugD+MFFzaxi26qvM6li9toxPNJIxBq9jHRuZzlpWez6d6RcTsaqr30BaCEuJhVcg7J4SiSL8xeW2sokAG65pZ/aig23cCSJkhazbMd7Cy/OFNjQrhc2PQ+E0c2xEwdwCNA8qTnsMrUeo9NXc+lozOf23LWD1EvZtcNNG5arPhSuGGYs90T1GdL2jqyS1E+1Xf0cOWqB4VMho7H+vV55SgZb+TYDrmB63YvgxcUKgsDRvPI9bBv3S3uxgktbE6gwnrfQirKowbscC07X3R1RJiI6hSkVNdrLnQF28BHMRlCpyhDejIWm4qHgOrWCN+I6hZtk+nsRuJF8sCSFPUWuzlG+/kSwaBwm/eEy+ZI66ufJamHUqC8bxa+6kINxtJTMN79ZnbIPwOvey9cfVfzwxefaStwpQbCJuZlMbuo4738HxUQpscxgv6LA5ZEMz8hlKO82cWDZSEDxSrUowueu1Az0u5tfzBUXaU5pZCnGdK6aMGHcTznaeUFebq8uhLR3uc0=

jobs:
  include:
    # ubuntu 14.04, gcc-4.8
    - env: VER=4.8 STDS="11;1y" TESTS="mpark"
      compiler: gcc
      os: linux
      addons: { apt: { packages: ["g++-4.8"], sources: ["ubuntu-toolchain-r-test"] } }

    # ubuntu 14.04, gcc-4.9
    - env: VER=4.9 STDS="11;14" TESTS="mpark"
      compiler: gcc
      os: linux
      addons: { apt: { packages: ["g++-4.9"], sources: ["ubuntu-toolchain-r-test"] } }

    # ubuntu 14.04, gcc-5
    - env: VER=5 STDS="11;14;1z" TESTS="mpark"
      compiler: gcc
      os: linux
      addons: { apt: { packages: ["g++-5"], sources: ["ubuntu-toolchain-r-test"] } }

    # ubuntu 14.04, gcc-6
    - env: VER=6 STDS="11;14;1z" TESTS="mpark"
      compiler: gcc
      os: linux
      addons: { apt: { packages: ["g++-6"], sources: ["ubuntu-toolchain-r-test"] } }

    # ubuntu 14.04, gcc-7
    - env: VER=7 STDS="11;14;17" TESTS="mpark;libc++"
      compiler: gcc
      os: linux
      addons: { apt: { packages: ["g++-7"], sources: ["ubuntu-toolchain-r-test"] } }

    # ubuntu 14.04, clang-3.6
    - env: VER=3.6 STDS="11;14" TESTS="mpark"
      compiler: clang
      os: linux
      addons: { apt: { packages: ["clang-3.6", "libstdc++-5-dev"], sources: ["ubuntu-toolchain-r-test", "llvm-toolchain-precise-3.6"] } }

    # ubuntu 14.04, clang-3.7
    - env: VER=3.7 STDS="11;14" TESTS="mpark"
      compiler: clang
      os: linux
      addons: { apt: { packages: ["clang-3.7", "libstdc++-5-dev"], sources: ["ubuntu-toolchain-r-test", "llvm-toolchain-precise-3.7"] } }

    # ubuntu 14.04, clang-3.8
    - env: VER=3.8 STDS="11;14" TESTS="mpark"
      compiler: clang
      os: linux
      addons: { apt: { packages: ["clang-3.8", "libstdc++-5-dev"], sources: ["ubuntu-toolchain-r-test", "llvm-toolchain-precise-3.8"] } }

    # ubuntu 14.04, clang-3.9
    - env: VER=3.9 STDS="11;14;1z" TESTS="mpark"
      compiler: clang
      os: linux
      addons: { apt: { packages: ["clang-3.9", "libstdc++-6-dev"], sources: ["ubuntu-toolchain-r-test", "llvm-toolchain-trusty-3.9"] } }

    # ubuntu 14.04, clang-4.0
    - env: VER=4.0 STDS="11;14;1z" TESTS="mpark"
      compiler: clang
      os: linux
      addons: { apt: { packages: ["clang-4.0", "libstdc++-6-dev"], sources: ["ubuntu-toolchain-r-test", "llvm-toolchain-trusty-4.0"] } }

    # ubuntu 14.04, clang-5.0
    - env: VER=5.0 STDS="11;14;17" TESTS="mpark;libc++"
      compiler: clang
      os: linux
      addons: { apt: { packages: ["clang-5.0", "libstdc++-7-dev"], sources: ["ubuntu-toolchain-r-test", "llvm-toolchain-trusty-5.0"] } }

    # OS X Yosemite 10.10, Apple Clang 6
    - env: STDS="11;14" TESTS="mpark"
      compiler: clang
      os: osx
      osx_image: xcode6.4

    # OS X El Capitan 10.11, Apple Clang 7
    - env: STDS="11;14;1z" TESTS="mpark"
      compiler: clang
      os: osx
      osx_image: xcode7.3

    # OS X Sierra 10.12, Apple Clang 8
    - env: STDS="11;14;1z" TESTS="mpark"
      compiler: clang
      os: osx
      osx_image: xcode8.3

    - stage: deploy
      before_install:
      install:
      before_script:
        - git config --global user.name "Travis CI"
        - git config --global user.email "<>"
        - travis_retry git clone https://$GITHUB_TOKEN@github.com/mpark/variant --depth 1 --branch=single-header single-header &>/dev/null
      script:
        - SHA=$(git rev-parse --short HEAD)
        - python support/single-header.py > single-header/master/variant.hpp
        - pushd single-header
        - |
          if git diff-index --quiet HEAD --; then
            echo "Nothing to do. No changes were made to 'variant.hpp'."
          else
            git add --all
            git commit -m "Updated 'variant.hpp' @${SHA}."
            travis_retry git pull --rebase && git push origin single-header &>/dev/null
          fi
        - popd

before_install:
  # Set the correct `CC` and `CXX` environment variables.
  - |
    if [ -n "${VER}" ]; then
      export CC="${CC}-${VER}"
      export CXX="${CXX}-${VER}"
    fi
  - ${CXX} --version
  # Directory for dependency installation.
  - DEPS="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS}
  # Install newer cmake.
  - |
    if [ "${TRAVIS_OS_NAME}" = "osx" ]; then
      brew update
      brew upgrade cmake
    elif [ "${TRAVIS_OS_NAME}" = "linux" ]; then
      travis_retry wget --no-check-certificate https://cmake.org/files/v3.8/cmake-3.8.2-Linux-x86_64.sh
      bash cmake-3.8.2-Linux-x86_64.sh --skip-license --prefix="${DEPS}"
      export PATH="${DEPS}/bin:${PATH}"
    fi
  - STDS=(${STDS//;/ })
  - BUILDS=(Debug Release)
  - EXS=(ON OFF)

install:
  - |
    for STD in "${STDS[@]}"; do
      for BUILD in "${BUILDS[@]}"; do
        for EX in "${EXS[@]}"; do
          BUILD_DIR="build-${STD}-${BUILD}-${EX}"
          mkdir "${BUILD_DIR}"
          pushd "${BUILD_DIR}"
          (
            set -ex
            export CXXFLAGS="-std=c++${STD}"
            cmake -DCMAKE_BUILD_TYPE="${BUILD}"          \
                  -DMPARK_VARIANT_EXCEPTIONS="${EX}"     \
                  -DMPARK_VARIANT_INCLUDE_TESTS="${TESTS}" ..
          )
          popd
        done
      done
    done

script:
  - |
    for STD in "${STDS[@]}"; do
      for BUILD in "${BUILDS[@]}"; do
        for EX in "${EXS[@]}"; do
          BUILD_DIR="build-${STD}-${BUILD}-${EX}"
          mkdir "${BUILD_DIR}"
          pushd "${BUILD_DIR}"
          (
            set -ex
            cmake --build . -- -k -j 2
            ctest --output-on-failure
          )
          popd
        done
      done
    done

notifications:
  email: false
